import java.util.StringTokenizer;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.PrintWriter;

/*
   1. 아래와 같은 명령어를 입력하면 컴파일이 이루어져야 하며, Solution5 라는 이름의 클래스가 생성되어야 채점이 이루어집니다.
       javac Solution5.java -encoding UTF8


   2. 컴파일 후 아래와 같은 명령어를 입력했을 때 여러분의 프로그램이 정상적으로 출력파일 output5.txt 를 생성시켜야 채점이 이루어집니다.
       java Solution5

   - 제출하시는 소스코드의 인코딩이 UTF8 이어야 함에 유의 바랍니다.
   - 수행시간 측정을 위해 다음과 같이 time 명령어를 사용할 수 있습니다.
       time java Solution5
   - 일정 시간 초과시 프로그램을 강제 종료 시키기 위해 다음과 같이 timeout 명령어를 사용할 수 있습니다.
       timeout 0.5 java Solution5   // 0.5초 수행
       timeout 1 java Solution5     // 1초 수행
 */

class Solution5 {
    static final int max_n = 1000;

    static int n, H;
    static int[] h = new int[max_n], d = new int[max_n - 1];
    static int Answer;

    public static void main(String[] args) throws Exception {
		/*
		   동일 폴더 내의 input5.txt 로부터 데이터를 읽어옵니다.
		   또한 동일 폴더 내의 output5.txt 로 정답을 출력합니다.
		 */
        BufferedReader br = new BufferedReader(new FileReader("input5.txt"));
        StringTokenizer stk;
        PrintWriter pw = new PrintWriter("output5.txt");

		/*
		   10개의 테스트 케이스가 주어지므로, 각각을 처리합니다.
		 */
        for (int test_case = 1; test_case <= 10; test_case++) {
			/*
			   각 테스트 케이스를 표준 입력에서 읽어옵니다.
			   먼저 블록의 개수와 최대 높이를 각각 n, H에 읽어들입니다.
			   그리고 각 블록의 높이를 h[0], h[1], ... , h[n-1]에 읽어들입니다.
			   다음 각 블록에 파인 구멍의 깊이를 d[0], d[1], ... , d[n-2]에 읽어들입니다.
			 */
            stk = new StringTokenizer(br.readLine());
            n = Integer.parseInt(stk.nextToken());
            H = Integer.parseInt(stk.nextToken());
            stk = new StringTokenizer(br.readLine());
            for (int i = 0; i < n; i++) {
                h[i] = Integer.parseInt(stk.nextToken());
            }
            stk = new StringTokenizer(br.readLine());
            for (int i = 0; i < n - 1; i++) {
                d[i] = Integer.parseInt(stk.nextToken());
            }


            /////////////////////////////////////////////////////////////////////////////////////////////
			/*
			   이 부분에서 여러분의 알고리즘이 수행됩니다.
			   문제의 답을 계산하여 그 값을 Answer에 저장하는 것을 가정하였습니다.
			 */
            /////////////////////////////////////////////////////////////////////////////////////////////

            long[][] counts = new long[H + 1][n + 1];

            // counts[i][j]: top number가 j이고 leftH가 i인 경우 그 위에 탑쌓는 가지수, 안 쌓는 것은 0

            for (int i = 0; i <= H; i++) {
                // top number가 n인 경우
                counts[i][n] = 0; // top이 [블록n]일 때 leftH가 i일 때 탑쌓기 경우의수
                // top number가 n-1인 경우
                counts[i][n - 1] = h[n - 1] - d[n - 2] <= i ? 1 : 0;
            }
            for (int j = 0; j <= n - 2; j++) {
                counts[0][j] = 0;
            }

            // topNumber: 0 to n
            // calculate topNumber n-2 ~ 0
            for (int topNumber = n - 2; topNumber >= 0; topNumber--) {
                for (int leftH = 1; leftH <= H; leftH++) {
                    final int topIndex = topNumber - 1;
                    if (topNumber == 0) {
                        int nextTopNumber = 1;
                        int nextTopIndex = 0;
                        int nextAddition = h[nextTopIndex];
                        if (nextAddition <= leftH) {
                            counts[leftH][topNumber] = counts[leftH - nextAddition][nextTopIndex];
                        }
                        for(int nextTopNumber2 = topNumber + 2; nextTopNumber2 <=n; nextTopNumber2++) {
                            int nextTopIndex2 = nextTopNumber2-1;
                            int nextAddition2 = h[nextTopIndex2];
                            if(nextAddition2 <=leftH) {
                                counts[leftH][topNumber] += counts[leftH-nextAddition2][nextTopIndex2];
                            }
                        }
                    } else {
                        int nextTopNumber1 = topNumber + 1;
                        int nextTopIndex1 = nextTopNumber1 - 1;
                        int nextAddition = h[nextTopIndex1] - d[topIndex];
                        if (nextAddition <= leftH) {
                            counts[leftH][topNumber] = counts[leftH - nextAddition][nextTopIndex1];
                        }
                        for (int nextTopNumber2 = topNumber + 2; nextTopNumber2 <= n; nextTopNumber2++) {
                            int nextTopIndex2 = nextTopNumber2 - 1;
                            int nextAddition2 = h[nextTopIndex2];
                            if (nextAddition2 <= leftH) {
                                counts[leftH][topNumber] += counts[leftH - nextAddition2][nextTopIndex2];
                            }
                        }
                    }

                }
            }

            Answer = (int) (counts[H][0] % 1000000);  //(int) (count(0, H) % 1000000);

            // output5.txt로 답안을 출력합니다.
            pw.println("#" + test_case + " " + Answer);
			/*
			   아래 코드를 수행하지 않으면 여러분의 프로그램이 제한 시간 초과로 강제 종료 되었을 때,
			   출력한 내용이 실제로 파일에 기록되지 않을 수 있습니다.
			   따라서 안전을 위해 반드시 flush() 를 수행하시기 바랍니다.
			 */
            pw.flush();
        }

        br.close();
        pw.close();
    }


    // 블록의 개수가 n
    // 블록은 0...n-1
    //
    // 최상층에 i가  쌓여 있고leftH  높이있을 때
    static long count(int i, int leftH) {
        if (i == n - 1) {
            return 0;
        }
        if (i == n - 2) { // 블록이 하나만 남았다.
            if (h[n - 1] <= leftH) {
                return 1;
            } else {
                return 0;
            }
        }

        long result = 0;
        int j1 = i + 1; // 새로쌓으려 하는 블록의 인덱스. 바로 다음블록
        int diffH = -d[i] + h[j1];
        result = count(j1, leftH - diffH); // 바로 다음 블록을 테스트
        // 바로 다음 블록이 아닌 것들을 테스트
        for (int j2 = i + 2; j2 < n; j2++) {
            result += count(j2, leftH - h[j2]);
        }
        return result;
    }
}

