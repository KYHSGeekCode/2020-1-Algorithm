\relax 
\@writefile{toc}{\contentsline {section}{\numberline {1}Asymptotic running time을 구하고 과정을 밝히시오}{1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}$T(n) = 4T(n/4)+ b$ ($b$ : a constant)}{1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}$T(n) = 3T(n/3)+ n \qopname  \relax o{log}n$}{1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}$T(n) = 5T(n/5)+ 3n$}{1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4}$T(n) = T(n/4) + T(3n/4) + \Theta (n)$}{1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5}$T(n) = 3T(n/3 + 9)+ n$}{2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2}다음 알고리즘의 수행시간을 구하라.}{2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}아래 알고리즘 test(n)의 수행 시간의 upper bound를 asymptotic notation으로 나타내어라. n은 양의 정수다.}{2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4}Selection Sort 알고리즘이 제대로 sorting한다는 것을 수학적 귀납법으로 증명하여라.}{3}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {5}Mergesort에서 둘로 나누는 대신 16개로 나누어도 sorting은 된다. 즉, 최상위 레벨에서 mergesort를 16번 부른 다음 merge를 한다. 이 경우의 알고리즘을 기술하고(상식적인 선에서 기술. 너무 자세할 필요 없음) complexity를 분석하라. Heap을 이용해서 merge 부분을 효율적으로 하는 방법도 기술에 포함시킬 것}{4}\protected@file@percent }
